{"version":3,"sources":["Text.js","post/Glitchpass.js","post/Waterpass.js","Effects.js","Sparks.js","Particles.js","index.js"],"names":["Text","forwardRef","ref","children","vAlign","hAlign","size","props","color","font","useLoader","THREE","config","useMemo","height","mesh","useUpdate","self","geometry","computeBoundingBox","boundingBox","getSize","position","x","y","scale","attach","args","DigitalGlitch","uniforms","tDiffuse","value","tDisp","byp","amount","angle","seed","seed_x","seed_y","distortion_x","distortion_y","col_s","vertexShader","fragmentShader","GlitchPass","dt_size","Pass","call","this","undefined","console","error","shader","UniformsUtils","clone","generateHeightmap","material","ShaderMaterial","camera","OrthographicCamera","scene","Scene","quad","Mesh","PlaneBufferGeometry","frustumCulled","add","factor","prototype","Object","assign","create","constructor","render","renderer","writeBuffer","readBuffer","deltaTime","maskActive","Math","max","texture","random","_Math","randFloat","PI","renderToScreen","setRenderTarget","clear","data_arr","Float32Array","length","i","val","DataTexture","RGBFormat","FloatType","needsUpdate","WaterShader","type","time","resolution","WaterPass","Vector2","Effects","down","composer","useRef","useThree","gl","aspect","useEffect","current","setSize","width","useFrame","attachArray","extend","EffectComposer","ShaderPass","RenderPass","UnrealBloomPass","FilmPass","meshline","r","Fatline","curve","speed","dashOffset","vertices","transparent","depthTest","lineWidth","dashArray","dashRatio","Sparks","mouse","count","colors","radius","lines","Array","fill","map","_","index","pos","sin","cos","points","getPoints","parseInt","viewport","rotation","lerp","key","Particles","light","dummy","particles","temp","t","xFactor","yFactor","zFactor","push","mx","my","state","set","forEach","particle","a","b","s","updateMatrix","setMatrixAt","matrix","instanceMatrix","distance","intensity","Ellipse","setFromPoints","ReactAtom","Number","hover","fallback","onClick","e","window","open","onPointerOver","onPointerOut","App","useState","hovered","onMouseMove","useCallback","clientX","clientY","innerWidth","innerHeight","isMobile","test","navigator","userAgent","document","body","style","cursor","pixelRatio","min","devicePixelRatio","fov","onMouseUp","onMouseDown","onCreated","toneMapping","setClearColor","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.9112b4fe.chunk.js","sourcesContent":["import * as THREE from 'three'\nimport React, { forwardRef, useMemo } from 'react'\nimport { useLoader, useUpdate } from 'react-three-fiber'\n\nconst Text = forwardRef(({ children, vAlign = 'center', hAlign = 'center', size = 1, color = '#000000', ...props }, ref) => {\n  const font = useLoader(THREE.FontLoader, '/Cyberpunk_Regular.json')\n  const config = useMemo(() => ({ font, size:5, height: 3 }), [font])\n  const mesh = useUpdate(\n    self => {\n      const size = new THREE.Vector3()\n      self.geometry.computeBoundingBox()\n      self.geometry.boundingBox.getSize(size)\n      self.position.x = hAlign === 'center' ? -size.x / 2 : hAlign === 'right' ? 0 : -size.x\n      self.position.y = vAlign === 'center' ? -size.y / 2 : vAlign === 'top' ? 0 : -size.y\n    },\n    [children]\n  )\n  return (\n    <group ref={ref} {...props} scale={[0.1 * size, 0.1 * size, 0.1]}>\n      <mesh ref={mesh}>\n        <textGeometry attach=\"geometry\" args={[children, config]} />\n        <meshNormalMaterial attach=\"material\" />\n      </mesh>\n    </group>\n  )\n})\n\nexport default Text\n","/**\n * @author alteredq / http://alteredqualia.com/\n */\n\n/**\n * @author felixturner / http://airtight.cc/\n *\n * RGB Shift Shader\n * Shifts red and blue channels from center in opposite directions\n * Ported from http://kriss.cx/tom/2009/05/rgb-shift/\n * by Tom Butterworth / http://kriss.cx/tom/\n *\n * amount: shift distance (1 is width of input)\n * angle: shift angle in radians\n */\n\nimport { DataTexture, FloatType, Math as _Math, Mesh, OrthographicCamera, PlaneBufferGeometry, RGBFormat, Scene, ShaderMaterial, UniformsUtils } from 'three'\nimport { Pass } from 'three/examples/jsm/postprocessing/Pass.js'\n\nvar DigitalGlitch = {\n  uniforms: {\n    tDiffuse: { value: null }, //diffuse texture\n    tDisp: { value: null }, //displacement texture for digital glitch squares\n    byp: { value: 0 }, //apply the glitch ?\n    amount: { value: 0.08 },\n    angle: { value: 0.02 },\n    seed: { value: 0.02 },\n    seed_x: { value: 0.02 }, //-1,1\n    seed_y: { value: 0.02 }, //-1,1\n    distortion_x: { value: 0.5 },\n    distortion_y: { value: 0.6 },\n    col_s: { value: 0.05 }\n  },\n\n  vertexShader: `varying vec2 vUv;\n    void main() {\n      vUv = uv;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n    }`,\n\n  fragmentShader: `uniform int byp; //should we apply the glitch\n    uniform sampler2D tDiffuse;\n    uniform sampler2D tDisp;\n    uniform float amount;\n    uniform float angle;\n    uniform float seed;\n    uniform float seed_x;\n    uniform float seed_y;\n    uniform float distortion_x;\n    uniform float distortion_y;\n    uniform float col_s;\n    varying vec2 vUv;\n    float rand(vec2 co){\n      return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n    }\n    void main() {\n      if(byp<1) {\n        vec2 p = vUv;\n        float xs = floor(gl_FragCoord.x / 0.5);\n        float ys = floor(gl_FragCoord.y / 0.5);\n        //based on staffantans glitch shader for unity https://github.com/staffantan/unityglitch\n        vec4 normal = texture2D (tDisp, p*seed*seed);\n        if(p.y<distortion_x+col_s && p.y>distortion_x-col_s*seed) {\n          if(seed_x>0.){\n            p.y = 1. - (p.y + distortion_y);\n          }\n          else {\n            p.y = distortion_y;\n          }\n        }\n        p.x+=normal.x*seed_x*(seed/5.);\n        p.y+=normal.y*seed_y*(seed/5.);\n        //base from RGB shift shader\n        vec2 offset = amount * vec2( cos(angle), sin(angle));\n        vec4 cr = texture2D(tDiffuse, p + offset);\n        vec4 cga = texture2D(tDiffuse, p);\n        vec4 cb = texture2D(tDiffuse, p - offset);\n        gl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\n      }\n      else {\n        gl_FragColor=texture2D (tDiffuse, vUv);\n      }\n    }`\n}\n\nvar GlitchPass = function(dt_size) {\n  Pass.call(this)\n  if (DigitalGlitch === undefined) console.error('THREE.GlitchPass relies on THREE.DigitalGlitch')\n  var shader = DigitalGlitch\n  this.uniforms = UniformsUtils.clone(shader.uniforms)\n  if (dt_size === undefined) dt_size = 64\n  this.uniforms['tDisp'].value = this.generateHeightmap(dt_size)\n  this.material = new ShaderMaterial({\n    uniforms: this.uniforms,\n    vertexShader: shader.vertexShader,\n    fragmentShader: shader.fragmentShader\n  })\n  this.camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1)\n  this.scene = new Scene()\n  this.quad = new Mesh(new PlaneBufferGeometry(2, 2), null)\n  this.quad.frustumCulled = false // Avoid getting clipped\n  this.scene.add(this.quad)\n  this.factor = 0\n}\n\nGlitchPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: GlitchPass,\n\n  render: function(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    const factor = Math.max(0, this.factor)\n    this.uniforms['tDiffuse'].value = readBuffer.texture\n    this.uniforms['seed'].value = Math.random() * factor //default seeding\n    this.uniforms['byp'].value = 0\n    if (factor) {\n      this.uniforms['amount'].value = (Math.random() / 90) * factor\n      this.uniforms['angle'].value = _Math.randFloat(-Math.PI, Math.PI) * factor\n      this.uniforms['distortion_x'].value = _Math.randFloat(0, 1) * factor\n      this.uniforms['distortion_y'].value = _Math.randFloat(0, 1) * factor\n      this.uniforms['seed_x'].value = _Math.randFloat(-0.3, 0.3) * factor\n      this.uniforms['seed_y'].value = _Math.randFloat(-0.3, 0.3) * factor\n    } else this.uniforms['byp'].value = 1\n    this.quad.material = this.material\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null)\n      renderer.render(this.scene, this.camera)\n    } else {\n      renderer.setRenderTarget(writeBuffer)\n      if (this.clear) renderer.clear()\n      renderer.render(this.scene, this.camera)\n    }\n  },\n\n  generateHeightmap: function(dt_size) {\n    var data_arr = new Float32Array(dt_size * dt_size * 3)\n    var length = dt_size * dt_size\n\n    for (var i = 0; i < length; i++) {\n      var val = _Math.randFloat(0, 1)\n      data_arr[i * 3 + 0] = val\n      data_arr[i * 3 + 1] = val\n      data_arr[i * 3 + 2] = val\n    }\n\n    var texture = new DataTexture(data_arr, dt_size, dt_size, RGBFormat, FloatType)\n    texture.needsUpdate = true\n    return texture\n  }\n})\n\nexport { GlitchPass }\n","/**\n * Simple underwater shader\n * \n \n parameters:\n tDiffuse: texture\n time: this should increase with time passing\n distort_speed: how fast you want the distortion effect of water to proceed\n distortion: to what degree will the shader distort the screen \n centerX: the distortion center X coord\n centerY: the distortion center Y coord\n\n explaination:\n the shader is quite simple\n it chooses a center and start from there make pixels around it to \"swell\" then \"shrink\" then \"swell\"...\n this is of course nothing really similar to underwater scene\n but you can combine several this shaders together to create the effect you need...\n And yes, this shader could be used for something other than underwater effect, for example, magnifier effect :)\n\n * @author vergil Wang\n */\n\nimport { Mesh, OrthographicCamera, PlaneBufferGeometry, Scene, ShaderMaterial, UniformsUtils, Vector2 } from 'three'\nimport { Pass } from 'three/examples/jsm/postprocessing/Pass'\n\nvar WaterShader = {\n  uniforms: {\n    byp: { value: 0 }, //apply the glitch ?\n    texture: { type: 't', value: null },\n    time: { type: 'f', value: 0.0 },\n    factor: { type: 'f', value: 0.0 },\n    resolution: { type: 'v2', value: null }\n  },\n\n  vertexShader: `varying vec2 vUv;\n    void main(){  \n      vUv = uv; \n      vec4 modelViewPosition = modelViewMatrix * vec4(position, 1.0);\n      gl_Position = projectionMatrix * modelViewPosition;\n    }`,\n\n  fragmentShader: `uniform int byp; //should we apply the glitch ?\n    uniform float time;\n    uniform float factor;\n    uniform vec2 resolution;\n    uniform sampler2D texture;\n    \n    varying vec2 vUv;\n    \n    void main() {  \n      if (byp<1) {\n        vec2 uv1 = vUv;\n        vec2 uv = gl_FragCoord.xy/resolution.xy;\n        float frequency = 6.0;\n        float amplitude = 0.015 * factor;\n        float x = uv1.y * frequency + time * .7; \n        float y = uv1.x * frequency + time * .3;\n        uv1.x += cos(x+y) * amplitude * cos(y);\n        uv1.y += sin(x-y) * amplitude * cos(y);\n        vec4 rgba = texture2D(texture, uv1);\n        gl_FragColor = rgba;\n      } else {\n        gl_FragColor = texture2D(texture, vUv);\n      }\n    }`\n}\n\nvar WaterPass = function(dt_size) {\n  Pass.call(this)\n  if (WaterShader === undefined) console.error('THREE.WaterPass relies on THREE.WaterShader')\n  var shader = WaterShader\n  this.uniforms = UniformsUtils.clone(shader.uniforms)\n  if (dt_size === undefined) dt_size = 64\n  this.uniforms['resolution'].value = new Vector2(dt_size, dt_size)\n  this.material = new ShaderMaterial({\n    uniforms: this.uniforms,\n    vertexShader: shader.vertexShader,\n    fragmentShader: shader.fragmentShader\n  })\n  this.camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1)\n  this.scene = new Scene()\n  this.quad = new Mesh(new PlaneBufferGeometry(2, 2), null)\n  this.quad.frustumCulled = false // Avoid getting clipped\n  this.scene.add(this.quad)\n  this.factor = 0\n  this.time = 0\n}\n\nWaterPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: WaterPass,\n\n  render: function(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    const factor = Math.max(0, this.factor)\n    this.uniforms['byp'].value = factor ? 0 : 1\n    this.uniforms['texture'].value = readBuffer.texture\n    this.uniforms['time'].value = this.time\n    this.uniforms['factor'].value = this.factor\n    this.time += 0.05\n    this.quad.material = this.material\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null)\n      renderer.render(this.scene, this.camera)\n    } else {\n      renderer.setRenderTarget(writeBuffer)\n      if (this.clear) renderer.clear()\n      renderer.render(this.scene, this.camera)\n    }\n  }\n})\n\nexport { WaterPass }\n","import * as THREE from 'three'\nimport React, { useRef, useMemo, useEffect } from 'react'\nimport { extend, useThree, useFrame } from 'react-three-fiber'\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer'\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass'\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass'\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass'\nimport { FilmPass } from 'three/examples/jsm/postprocessing/FilmPass'\nimport { GlitchPass } from './post/Glitchpass'\nimport { WaterPass } from './post/Waterpass'\n\nextend({ EffectComposer, ShaderPass, RenderPass, WaterPass, UnrealBloomPass, FilmPass, GlitchPass })\n\nexport default function Effects({ down }) {\n  const composer = useRef()\n  const { scene, gl, size, camera } = useThree()\n  const aspect = useMemo(() => new THREE.Vector2(512, 512), [])\n  useEffect(() => void composer.current.setSize(size.width, size.height), [size])\n  useFrame(() => composer.current.render(), 1)\n  return (\n    <effectComposer ref={composer} args={[gl]}>\n      <renderPass attachArray=\"passes\" scene={scene} camera={camera} />\n      <waterPass attachArray=\"passes\" factor={1.5} />\n      <unrealBloomPass attachArray=\"passes\" args={[aspect, 2, 1, 0]} />\n      <glitchPass attachArray=\"passes\" factor={down ? 1 : 0} />\n    </effectComposer>\n  )\n}\n","import * as THREE from 'three'\nimport React, { useRef, useMemo } from 'react'\nimport { extend, useFrame, useThree } from 'react-three-fiber'\nimport lerp from 'lerp'\nimport * as meshline from 'threejs-meshline'\n\nextend(meshline)\n\nconst r = () => Math.max(0.2, Math.random())\n\nfunction Fatline({ curve, width, color, speed }) {\n  const material = useRef()\n  useFrame(() => (material.current.uniforms.dashOffset.value -= speed))\n  return (\n    <mesh>\n      <meshLine attach=\"geometry\" vertices={curve} />\n      <meshLineMaterial attach=\"material\" ref={material} transparent depthTest={false} lineWidth={width} color={color} dashArray={0.1} dashRatio={0.95} />\n    </mesh>\n  )\n}\n\nexport default function Sparks({ mouse, count, colors, radius = 10 }) {\n  const lines = useMemo(\n    () =>\n      new Array(count).fill().map((_, index) => {\n        const pos = new THREE.Vector3(Math.sin(0) * radius * r(), Math.cos(0) * radius * r(), 0)\n        const points = new Array(30).fill().map((_, index) => {\n          const angle = (index / 20) * Math.PI * 2\n          return pos.add(new THREE.Vector3(Math.sin(angle) * radius * r(), Math.cos(angle) * radius * r(), 0)).clone()\n        })\n        const curve = new THREE.CatmullRomCurve3(points).getPoints(1000)\n        return {\n          color: colors[parseInt(colors.length * Math.random())],\n          width: Math.max(0.1, (0.2 * index) / 10),\n          speed: Math.max(0.001, 0.004 * Math.random()),\n          curve\n        }\n      }),\n    [count]\n  )\n\n  const ref = useRef()\n  const { size, viewport } = useThree()\n  const aspect = size.width / viewport.width\n  useFrame(() => {\n    if (ref.current) {\n      ref.current.rotation.x = lerp(ref.current.rotation.x, 0 + mouse.current[1] / aspect / 200, 0.1)\n      ref.current.rotation.y = lerp(ref.current.rotation.y, 0 + mouse.current[0] / aspect / 400, 0.1)\n    }\n  })\n\n  return (\n    <group ref={ref}>\n      <group position={[-radius * 2, -radius, -10]} scale={[1, 1.3, 1]}>\n        {lines.map((props, index) => (\n          <Fatline key={index} {...props} />\n        ))}\n      </group>\n    </group>\n  )\n}\n","import * as THREE from 'three'\nimport React, { useRef, useMemo } from 'react'\nimport { useFrame, useThree } from 'react-three-fiber'\nimport './styles.css'\n\nexport default function Particles({ count, mouse }) {\n  const mesh = useRef()\n  const light = useRef()\n  const { size, viewport } = useThree()\n  const aspect = size.width / viewport.width\n\n  const dummy = useMemo(() => new THREE.Object3D(), [])\n  // Generate some random positions, speed factors and timings\n  const particles = useMemo(() => {\n    const temp = []\n    for (let i = 0; i < count; i++) {\n      const t = Math.random() * 100\n      const factor = 20 + Math.random() * 100\n      const speed = 0.01 + Math.random() / 200\n      const xFactor = -50 + Math.random() * 100\n      const yFactor = -50 + Math.random() * 100\n      const zFactor = -50 + Math.random() * 100\n      temp.push({ t, factor, speed, xFactor, yFactor, zFactor, mx: 0, my: 0 })\n    }\n    return temp\n  }, [count])\n  // The innards of this hook will run every frame\n  useFrame(state => {\n    // Makes the light follow the mouse\n    light.current.position.set(mouse.current[0] / aspect, -mouse.current[1] / aspect, 0)\n    // Run through the randomized data to calculate some movement\n    particles.forEach((particle, i) => {\n      let { t, factor, speed, xFactor, yFactor, zFactor } = particle\n      // There is no sense or reason to any of this, just messing around with trigonometric functions\n      t = particle.t += speed / 2\n      const a = Math.cos(t) + Math.sin(t * 1) / 10\n      const b = Math.sin(t) + Math.cos(t * 2) / 10\n      const s = Math.cos(t)\n      particle.mx += (mouse.current[0] - particle.mx) * 0.01\n      particle.my += (mouse.current[1] * -1 - particle.my) * 0.01\n      // Update the dummy object\n      dummy.position.set(\n        (particle.mx / 10) * a + xFactor + Math.cos((t / 10) * factor) + (Math.sin(t * 1) * factor) / 10,\n        (particle.my / 10) * b + yFactor + Math.sin((t / 10) * factor) + (Math.cos(t * 2) * factor) / 10,\n        (particle.my / 10) * b + zFactor + Math.cos((t / 10) * factor) + (Math.sin(t * 3) * factor) / 10\n      )\n      dummy.scale.set(s, s, s)\n      dummy.rotation.set(s * 5, s * 5, s * 5)\n      dummy.updateMatrix()\n      // And apply the matrix to the instanced item\n      mesh.current.setMatrixAt(i, dummy.matrix)\n    })\n    mesh.current.instanceMatrix.needsUpdate = true\n  })\n  return (\n    <>\n      <pointLight ref={light} distance={40} intensity={8} color=\"lightblue\" />\n      <instancedMesh ref={mesh} args={[null, null, count]}>\n        <dodecahedronBufferGeometry attach=\"geometry\" args={[0.2, 0]} />\n        <meshPhongMaterial attach=\"material\" color=\"#050505\" />\n      </instancedMesh>\n    </>\n  )\n}\n","import * as THREE from 'three'\nimport ReactDOM from 'react-dom'\nimport React, { Suspense, useState, useCallback, useEffect, useRef, useMemo } from 'react'\nimport { Canvas, useFrame, useThree } from 'react-three-fiber'\nimport lerp from 'lerp'\nimport Text from './Text'\nimport Effects from './Effects'\nimport Sparks from './Sparks'\nimport Particles from './Particles'\nimport './styles.css'\n\nfunction Ellipse(props) {\n  const geometry = useMemo(() => {\n    const curve = new THREE.EllipseCurve(0, 0, 10, 3, 0, 2 * Math.PI, false, 0)\n    const points = curve.getPoints(50)\n    return new THREE.BufferGeometry().setFromPoints(points)\n  }, [])\n  return (\n    <line geometry={geometry} {...props}>\n      <meshBasicMaterial attach=\"material\" />\n    </line>\n  )\n}\n\nfunction ReactAtom(props) {\n  return (\n    <group {...props}>\n      <Ellipse />\n      <Ellipse rotation={[0, 0, Math.PI / 3]} />\n      <Ellipse rotation={[0, 0, -Math.PI / 3]} />\n      <mesh>\n        <sphereBufferGeometry attach=\"geometry\" args={[0.5, 32, 32]} />\n        <meshBasicMaterial attach=\"material\" color=\"red\" />\n      </mesh>\n    </group>\n  )\n}\n\nfunction Number({ mouse, hover }) {\n  const ref = useRef()\n  const { size, viewport } = useThree()\n  const aspect = size.width / viewport.width\n  useFrame(state => {\n    if (ref.current) {\n      ref.current.position.x = lerp(ref.current.position.x, mouse.current[0] / aspect / 10, 0.1)\n      ref.current.rotation.x = lerp(ref.current.rotation.x, 0 + mouse.current[1] / aspect / 50, 0.1)\n      ref.current.rotation.y = 0.8\n    }\n  })\n  return (\n    <Suspense fallback={null}>\n      <group ref={ref}>\n        <Text\n          size={10}\n          onClick={e => window.open('https://github.com/react-spring/react-three-fiber/blob/master/whatsnew.md', '_blank')}\n          onPointerOver={() => hover(true)}\n          onPointerOut={() => hover(false)}>\n          NINOV\n        </Text>\n        <ReactAtom position={[35, -20, 0]} scale={[1, 0.5, 1]} />\n      </group>\n    </Suspense>\n  )\n}\n\nfunction App() {\n  const [hovered, hover] = useState(false)\n  const [down, set] = useState(false)\n  const mouse = useRef([0, 0])\n  const onMouseMove = useCallback(({ clientX: x, clientY: y }) => (mouse.current = [x - window.innerWidth / 2, y - window.innerHeight / 2]), [])\n  const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent)\n\n  useEffect(() => {\n    document.body.style.cursor = hovered\n      ? 'pointer'\n      : \"url('https://raw.githubusercontent.com/chenglou/react-motion/master/demos/demo8-draggable-list/cursor.png') 39 39, auto\"\n  }, [hovered])\n\n  return (\n    <Canvas\n      pixelRatio={Math.min(2, isMobile ? window.devicePixelRatio : 1)}\n      camera={{ fov: 100, position: [0, 0, 30] }}\n      onMouseMove={onMouseMove}\n      onMouseUp={() => set(false)}\n      onMouseDown={() => set(true)}\n      onCreated={({ gl }) => {\n        gl.toneMapping = THREE.Uncharted2ToneMapping\n        gl.setClearColor(new THREE.Color('#020207'))\n      }}>\n      <fog attach=\"fog\" args={['white', 50, 190]} />\n      <pointLight distance={100} intensity={4} color=\"white\" />\n      <Number mouse={mouse} hover={hover} />\n      <Particles count={isMobile ? 5000 : 10000} mouse={mouse} />\n      <Sparks count={20} mouse={mouse} colors={['#A2CCB6', '#FCEEB5', '#EE786E', '#e0feff', 'lightpink', 'lightblue']} />\n      <Effects down={down} />\n    </Canvas>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}